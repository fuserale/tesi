%%%%%%%%%%%%%%%%%%%%%  input settings  %%%%%%%%%%%%%%%%%%

	net.hyperParam.sizeFmInput = [28 28 28]; 	% size of input feature map
	net.hyperParam.numFmInput  = 1;        	% number of feature map of the input

%%%%%%%%%%%%%%%%%%%%%  Layers specification %%%%%%%%%%%%%%%%%%

	net.layers{end+1}.properties = struct('type',2,'numFm',7  , 'Activation',@Relu, 'dActivation',@dRelu,'kernel',5,'pad',2, 'stride', [2 2 4], 'pooling', [1 1 1]);
	net.layers{end+1}.properties = struct('type',2,'numFm',17 , 'kernel',[5 5 3]  ,'pad',[1 1 0], 'pooling', [1 1 1], 'dropOut' ,0.8);
	net.layers{end+1}.properties = struct('type',1,'numFm',128);
	net.layers{end+1}.properties = struct('type',1,'numFm',10);

%%%%%%%%%%%%%%%%%%%%%  Hyper params - training %%%%%%%%%%%%%%%%%%

	net.hyperParam.trainLoopCount = 500;		%on how many images to train before evaluating the network
	net.hyperParam.testImageNum   = 1000;   	% after each loop, on how many images to evaluate network performance
	net.hyperParam.ni_initial     = 0.05;		% ni to start training process
	net.hyperParam.ni_final       = 0.00001;	% final ni to stop the training process


